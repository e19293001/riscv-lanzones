#+LATEX_HEADER_EXTRA: \usepackage{tikz-timing}[2009/12/09]
#+LATEX_HEADER_EXTRA: \usetikztiminglibrary[new={char=Q,reset char=R}]{counters}
#+LATEX_HEADER_EXTRA: \usetikzlibrary{shapes,arrows}
#+LATEX_HEADER_EXTRA: \usepackage[active,tightpage]{preview}
#+LATEX_HEADER_EXTRA: \setlength{\PreviewBorder}{5mm}

#+LATEX_HEADER_EXTRA: \definecolor{bgblue}{rgb}{0.5,0.9,0.9}
#+LATEX_HEADER_EXTRA: \definecolor{bgred}{rgb}{1,0.6,0.6}
#+LATEX_HEADER_EXTRA: \definecolor{fgblue}{rgb}{0,0,0.6}
#+LATEX_HEADER_EXTRA: \definecolor{bgred}{rgb}{0.6,,0}

* RISC-V 32I Instruction Set Implementation

This document describes the design implementation specifications
of RISC-V 32I.

** Top Level Architecture

** Hand Shake
*** External Hand Shake
**** Read Hand Shake
#+CAPTION: <<Figure_1>>
#+NAME: fig: <<Figure_1>>
#+BEGIN_LATEX
    \begin{tikztimingtable} [
    %    table/grid,
        timing/slope=0.15,
        timing/coldist=2pt,
        xscale=2.05,yscale=1.1,
        semithick
    ]

      \scriptsize clk & 15{C} \\ 
      o\_rdy & LLLLLHHHHLLLL \\
      i\_ack & LLLLLLLHHLLLL \\
      i\_addr & 7U 2D{$VALID$} 4U \\
      i\_data & 7U 2D{$VALID$} 4U \\
    \end{tikztimingtable}
#+END_LATEX

[[Figure_1]] shows a two way handshake for the read channel.
**** Write Hand Shake
#+BEGIN_LATEX

    \begin{tikztimingtable} [
    %    table/grid,
        timing/slope=0.15,
        timing/coldist=2pt,
        xscale=2.05,yscale=1.1,
        semithick
    ]

      \scriptsize clk & 15{C} \\ 
      outputAddress & 5U 4D{0x00} 4U 2D{} \\
      outputWdata & 15U \\
      outputWnR & LLLLLLLLLLLLLLL \\
      outputSelect & LLLLLHH N(A) HHLL LL HH \\
      inputRdata & 7U 2D{0x3005} N(C) 6U \\
      inputValid & LLLLLLLHH N(B) 6L \\
      \\
      regState & 3D{$P\_IDLE$} 6D{$P\_FETCH$} 2D{\scriptsize $P\_DECODE$} 2D{\scriptsize $P\_EXECUTE$} 2D{$P\_FETCH$} \\
      combAddressSelect & 3D{$NONE$} 6D{$PC$} 6D{$NONE$} \\ 
      combOutputAddressEn & LLLHHLLLLLLLLHH \\
      enInstruction & LLLLLLLHH 6L \\
      regInstruction & 9U 4D{0x3005} 2U \\
      w\_asp & LLLLLLLLLHHHHLL \\
      \\
      enStackPtr & 11L HH 2L \\
      regStackPtr & 13D{0xFFFE} 2D{0xFFFF} \\
      enPrgCntr & 11L HH 2L \\
      regPrgCntr & 13D{0x0000} 2D{0x0001} \\
      \extracode
    \end{tikztimingtable}
#+END_LATEX

*** Internal Hand Shake
** Instructions [78%]
*** DONE LUI
    CLOSED: [2017-01-29 Sun 00:02]
#+BEGIN_LATEX
    \begin{tikztimingtable} [
    %    table/grid,
        timing/slope=0.15,
        timing/coldist=2pt,
        xscale=2.05,yscale=1.1,
        semithick
    ]

      \scriptsize clk & 15{C} \\ 
      outputAddress & 5U 4D{0x00} 4U 2D{} \\
      outputWdata & 15U \\
      outputWnR & LLLLLLLLLLLLLLL \\
      outputSelect & LLLLLHH N(A) HHLL LL HH \\
      inputRdata & 7U 2D{0x3005} N(C) 6U \\
      inputValid & LLLLLLLHH N(B) 6L \\
      \\
      regState & 3D{$P\_IDLE$} 6D{$P\_FETCH$} 2D{\scriptsize $P\_DECODE$} 2D{\scriptsize $P\_EXECUTE$} 2D{$P\_FETCH$} \\
      combAddressSelect & 3D{$NONE$} 6D{$PC$} 6D{$NONE$} \\ 
      combOutputAddressEn & LLLHHLLLLLLLLHH \\
      enInstruction & LLLLLLLHH 6L \\
      regInstruction & 9U 4D{0x3005} 2U \\
      w\_asp & LLLLLLLLLHHHHLL \\
      \\
      enStackPtr & 11L HH 2L \\
      regStackPtr & 13D{0xFFFE} 2D{0xFFFF} \\
      enPrgCntr & 11L HH 2L \\
      regPrgCntr & 13D{0x0000} 2D{0x0001} \\
      \extracode
    \end{tikztimingtable}
#+END_LATEX
*** DONE AUIPC
    CLOSED: [2017-03-13 Mon 10:13]
    :PROPERTIES:
    :END:
    :LOGBOOK:
    CLOCK: [2017-03-04 Sat 06:57]--[2017-03-04 Sat 07:08] =>  0:11
    :LOGBOOK:  
    CLOCK: [2017-03-02 Thu 14:00]--[2017-03-02 Thu 14:01] =>  0:01
    :END:      
    :PROPERTIES:
    :Effort:   0:30
    :END:
*** DONE JAL
    CLOSED: [2017-03-17 Fri 17:25]
    :PROPERTIES:
    :END:
    :LOGBOOK:  
    CLOCK: [2017-03-17 Fri 17:01]--[2017-03-17 Fri 17:25] =>  0:24
    :END:      
    :PROPERTIES:
    :Effort:   0:45
    :END:
*** DONE JALR
    CLOSED: [2017-03-20 Mon 10:50]
    :PROPERTIES:
    :END:
    :LOGBOOK:  
    CLOCK: [2017-03-20 Mon 10:50]--[2017-03-20 Mon 10:51] =>  0:01
    CLOCK: [2017-03-20 Mon 10:20]--[2017-03-20 Mon 10:50] =>  0:30
    :END:      
    :PROPERTIES:
    :Effort:   0:30
    :END:
*** DONE BEQ
    CLOSED: [2017-03-20 Mon 11:58]
    :PROPERTIES:
    :END:
    :LOGBOOK:  
    CLOCK: [2017-03-20 Mon 10:51]--[2017-03-20 Mon 11:06] =>  0:15
    :END:      
    :PROPERTIES:
    :Effort:   0:45
    :END:
*** DONE BNE
    CLOSED: [2017-03-21 Tue 09:14]
    :PROPERTIES:
    :END:
    :LOGBOOK:  
    CLOCK: [2017-03-21 Tue 08:58]--[2017-03-21 Tue 09:14] =>  0:16
    :END:      
    :PROPERTIES:
    :Effort:   0:30
    :END:
*** DONE BLT
    CLOSED: [2017-03-22 Wed 09:55]
    :PROPERTIES:
    :END:
    :LOGBOOK:  
    CLOCK: [2017-03-22 Wed 09:51]--[2017-03-22 Wed 09:55] =>  0:04
    CLOCK: [2017-03-22 Wed 09:22]--[2017-03-22 Wed 09:43] =>  0:21
    :END:      
    :PROPERTIES:
    :Effort:   0:30
    :END:
*** DONE BGE
    CLOSED: [2017-03-23 Thu 12:22]
    :PROPERTIES:
    :END:
    :LOGBOOK:  
    CLOCK: [2017-03-23 Thu 07:52]--[2017-03-23 Thu 08:10] =>  0:18
    :END:      
    :PROPERTIES:
    :Effort:   0:30
    :END:
*** DONE BLTU
    CLOSED: [2017-03-27 Mon 12:44]
    :PROPERTIES:
    :END:
    :LOGBOOK:  
    CLOCK: [2017-03-27 Mon 11:31]--[2017-03-27 Mon 11:35] =>  0:04
    :END:      
    :PROPERTIES:
    :Effort:   0:15
    :END:
*** DONE BGEU
    CLOSED: [2017-03-27 Mon 13:00]
    :PROPERTIES:
    :END:
    :LOGBOOK:  
    CLOCK: [2017-03-27 Mon 12:48]--[2017-03-27 Mon 12:59] =>  0:11
    :END:      
    :PROPERTIES:
    :Effort:   0:15
    :END:
*** DONE LB
    CLOSED: [2017-02-20 Mon 11:19]
    :PROPERTIES:
    :END:
    :LOGBOOK:  
    CLOCK: [2017-02-20 Mon 10:10]--[2017-02-20 Mon 11:19] =>  1:09
    CLOCK: [2017-02-20 Mon 08:46]--[2017-02-20 Mon 08:58] =>  0:12
    :END:      
    :PROPERTIES:
    :Effort:   0:30
    :END:
*** DONE LH
    CLOSED: [2017-02-20 Mon 12:18]
    :PROPERTIES:
    :END:
    :LOGBOOK:
    CLOCK: [2017-02-20 Mon 12:02]--[2017-02-20 Mon 12:18] =>  0:16
    :END:
    :PROPERTIES:
    :Effort:   0:30
    :END:
*** DONE LW
    CLOSED: [2017-01-29 Sun 00:08]
*** DONE LBU
    CLOSED: [2017-02-27 Mon 08:06]
    :PROPERTIES:
    :END:
    :LOGBOOK:  
    CLOCK: [2017-02-27 Mon 07:48]--[2017-02-27 Mon 08:06] =>  0:18
    :END:      
    :PROPERTIES:
    :Effort:   0:30
    :END:
*** DONE LHU
    CLOSED: [2017-02-27 Mon 09:45]
    :PROPERTIES:
    :END:
    :LOGBOOK:  
    CLOCK: [2017-02-27 Mon 09:28]--[2017-02-27 Mon 09:45] =>  0:17
    :END:      
    :PROPERTIES:
    :Effort:   0:30
    :END:
*** DONE SB
    CLOSED: [2017-02-22 Wed 13:16]
    :PROPERTIES:
    :END:
    :LOGBOOK:  
    CLOCK: [2017-02-22 Wed 12:54]--[2017-02-22 Wed 13:16] =>  0:22
    CLOCK: [2017-02-21 Tue 07:51]--[2017-02-21 Tue 08:59] =>  1:08
    :END:      
    :PROPERTIES:
    :Effort:   0:30
    :END:
*** DONE SH
    CLOSED: [2017-02-23 Thu 09:15]
    :PROPERTIES:
    :END:
    :LOGBOOK:  
    CLOCK: [2017-02-23 Thu 08:33]--[2017-02-23 Thu 09:15] =>  0:42
    :END:      
    :PROPERTIES:
    :Effort:   0:15
    :END:
*** DONE SW
    CLOSED: [2017-01-29 Sun 00:07]
*** DONE ADDI
    CLOSED: [2017-02-13 Mon 12:28]
    :PROPERTIES:
    :END:
    :LOGBOOK:  
    CLOCK: [2017-02-13 Mon 10:23]--[2017-02-13 Mon 11:05] =>  0:42
    :END:      
    :PROPERTIES:
    :Effort:   0:30
    :END:
*** DONE SLTI
    CLOSED: [2017-02-16 Thu 18:50]
    :PROPERTIES:
    :END:
    :LOGBOOK:  
    CLOCK: [2017-02-16 Thu 18:24]--[2017-02-16 Thu 18:50] =>  0:26
    CLOCK: [2017-02-15 Wed 10:09]--[2017-02-15 Wed 10:52] =>  0:43
    :END:      
    :PROPERTIES:
    :Effort:   0:30
    :END:
*** DONE SLTIU
    CLOSED: [2017-02-16 Thu 19:02]
    :PROPERTIES:
    :END:
    :LOGBOOK:  
    CLOCK: [2017-02-16 Thu 18:50]--[2017-02-16 Thu 19:02] =>  0:12
    :END:      
    :PROPERTIES:
    :Effort:   0:30
    :END:
*** DONE XORI
    CLOSED: [2017-02-15 Wed 08:04]
    :PROPERTIES:
    :END:
    :LOGBOOK:  
    CLOCK: [2017-02-14 Tue 11:29]--[2017-02-14 Tue 12:45] =>  1:16
    :END:      
    :PROPERTIES:
    :Effort:   0:30
    :END:
*** DONE ORI
    CLOSED: [2017-02-05 Sun 17:55]
    :LOGBOOK:
    CLOCK: [2017-02-05 Sun 15:34]--[2017-02-05 Sun 17:56] =>  2:22
    :END:
*** DONE ANDI
    CLOSED: [2017-02-05 Sun 18:17]
    :LOGBOOK:
    CLOCK: [2017-02-05 Sun 17:57]--[2017-02-05 Sun 18:17] =>  0:20
    :END:
*** DONE SLLI
    CLOSED: [2017-02-05 Sun 20:16]
    :LOGBOOK:
    CLOCK: [2017-02-05 Sun 19:36]--[2017-02-05 Sun 20:16] =>  0:40
    :END:
*** DONE SRLI
    CLOSED: [2017-02-13 Mon 07:34]
    :PROPERTIES:
    :END:
    :LOGBOOK:
    CLOCK: [2017-02-13 Mon 07:34]--[2017-02-13 Mon 07:54] =>  0:20
    CLOCK: [2017-02-13 Mon 07:33]--[2017-02-13 Mon 07:34] =>  0:01
    :END:
    :PROPERTIES:
    :Effort:   0:30
    :END:
*** DONE SRAI
    CLOSED: [2017-02-13 Mon 08:55]
    :PROPERTIES:
    :END:
    :LOGBOOK:  
    CLOCK: [2017-02-13 Mon 07:54]--[2017-02-13 Mon 08:55] =>  1:01
    :END:      
    :PROPERTIES:
    :Effort:   0:30
    :END:
*** DONE ADD
    CLOSED: [2017-01-29 Sun 00:07]
*** DONE SUB
    CLOSED: [2017-02-01 Wed 12:44]
*** DONE SLL
    CLOSED: [2017-02-05 Sun 17:57]
    :PROPERTIES:
    :END:
    :LOGBOOK:  
    CLOCK: [2017-02-01 Wed 16:33]--[2017-02-01 Wed 17:57] =>  1:24
    :END:      
    :PROPERTIES:
    :Effort:   0:30
    :END:
*** DONE SLT
    CLOSED: [2017-02-20 Mon 08:18]
    :PROPERTIES:
    :END:
    :LOGBOOK:  
    CLOCK: [2017-02-17 Fri 08:00]--[2017-02-17 Fri 08:18] =>  0:18
    :END:      
    :PROPERTIES:
    :Effort:   0:30
    :END:
*** DONE SLTU
    CLOSED: [2017-02-20 Mon 08:45]
    :PROPERTIES:
    :END:
    :LOGBOOK:  
    CLOCK: [2017-02-20 Mon 08:45]--[2017-02-20 Mon 08:46] =>  0:01
    CLOCK: [2017-02-20 Mon 08:18]--[2017-02-20 Mon 08:45] =>  0:27
    :END:      
    :PROPERTIES:
    :Effort:   0:30
    :END:
*** DONE XOR
    CLOSED: [2017-02-15 Wed 09:04]
    :PROPERTIES:
    :END:
    :LOGBOOK:  
    CLOCK: [2017-02-15 Wed 08:04]--[2017-02-15 Wed 09:04] =>  1:00
    :END:      
    :PROPERTIES:
    :Effort:   0:30
    :END:
*** DONE SRL
    CLOSED: [2017-02-28 Tue 07:58]
    :PROPERTIES:
    :END:
    :LOGBOOK:  
    CLOCK: [2017-02-27 Mon 17:54]--[2017-02-27 Mon 18:11] =>  0:17
    :END:      
    :PROPERTIES:
    :Effort:   0:30
    :END:
*** DONE SRA
    CLOSED: [2017-02-28 Tue 08:51]
    :PROPERTIES:
    :END:
    :LOGBOOK:  
    CLOCK: [2017-02-28 Tue 08:00]--[2017-02-28 Tue 08:51] =>  0:51
    :END:      
    :PROPERTIES:
    :Effort:   0:30
    :END:
*** DONE OR
    CLOSED: [2017-02-15 Wed 09:13]
    :PROPERTIES:
    :END:
    :LOGBOOK:  
    CLOCK: [2017-02-15 Wed 09:13]--[2017-02-15 Wed 09:15] =>  0:02
    CLOCK: [2017-02-15 Wed 09:04]--[2017-02-15 Wed 09:13] =>  0:09
    :END:      
    :PROPERTIES:
    :Effort:   0:30
    :END:
*** DONE AND
    CLOSED: [2017-02-15 Wed 09:54]
    :PROPERTIES:
    :END:
    :LOGBOOK:  
    CLOCK: [2017-02-15 Wed 09:15]--[2017-02-15 Wed 09:26] =>  0:11
    :END:      
    :PROPERTIES:
    :Effort:   0:30
    :END:
*** TODO FENCE
*** TODO FENCE.I
*** TODO SCALL
*** TODO SBREAK
*** TODO RDCYCLE rd
*** TODO RDCYCLEH rd
*** TODO RDTIME rd
*** TODO RDTIMEH rd
*** TODO RDINSTRET rd
*** TODO RDINSTRETH rd

* Test
** ADD

ADD rd,rs1,rs2

31    25 24    20 19   15 14  12 11    7 6    0
________ ________ _______ ______ _______ ______
 funct7    rs2      rs1   funct3   rd    opcode

funct7 = inst[31:25]
rs2 = inst[24:20]
rs1 = inst[19:15]
funct3 = inst[14:12]
rd = inst[11:7]
opcode = inst[6:0]

*** Example

**** ADD x4,x3,x2

Add x3 and x2 then store the result to x4

ADD x4,x3,x2

funct7 = 0000000
rs2 = 00010
rs1 = 00011
funct3 = 000
rd = 00100
opcode = 0110011

00000000001000011000001000110011

0000000 00010 00011 000 00100 0110011

0000 0000 0010 0001 1000 0010 0011 0011
   0    0    2    1    8    2    3    3

00218233

** LUI

LUI rd,imm

31     12 11  7 6    0
_________ _____ ______
   imm     rd   opcode

imm = inst[31:12]
rd = inst[11:7]
opcode = inst[6:0]

*** Example
**** Load 3 to x3

LUI x3,0x3

imm = 0000 0000 0000 0000 0011
rd = 00011
opcode = 0110111

00000000000000000011000110110111

0000 0000 0000 0000 0011 0001 1011 0111
   0    0    0    0    3    1    B    7

000031B7

**** Load 2 to x2

LUI x2,0x2

imm = 0000 0000 0000 0000 0010
rd = 00010
opcode = 0110111

00000000000000000010000100110111

0000 0000 0000 0000 0010 0001 0011 0111
   0    0    0    0    2    1    3    7

00002137

** SW

SW rs1,rs2,imm

31    25 24   20 19    15 14   12 11   7 6    0
________ _______ ________ _______ ______ ______
  imm      rs2     rs1     funct3  imm   opcode

*** Examples

**** SW x2,x0,imm

Store the contents of register x2 to memory address 0x0108

SW x2,x0,0x8

imm = 0001 0000 1000
rs1 = 00000
rs2 = 00010
funct3 = 010
opcode = 0100011

imm = {inst[31:25],inst[11:7]}
rs2 = inst[24:20]
rs1 = inst[19:15]
funct3 = inst[14:12]
opcode = inst[6:0]

0001000 00010 00000 010 01000 0100011

0001 0000 0010 0000 0010 0100 0010 0011
   0    0    2    0    2    4    2    3

10202423

**** SW x3,x0,imm

Store the contents of register x2 to memory address 0x0107

SW x3,x0,0x7

imm = 0001 0000 0111
rs1 = 00000
rs2 = 00011
funct3 = 010
opcode = 0100011

imm = {inst[31:25],inst[11:7]}
rs2 = inst[24:20]
rs1 = inst[19:15]
funct3 = inst[14:12]
opcode = inst[6:0]

0001000 00011 00000 010 00111 0100011

0000 0000 0011 0000 0010 0011 1010 0011
   1    0    3    0    2    3    a    3

103023a3

** LW
LW rd,rs1,imm

31    20 19   15 14   12 11   7 6      0
_______  ______  _______ ______ _______   
  imm     rs1      func    rd   opcode

inst[31:20] = imm[11:0]
inst[19:15] = rs1
inst[14:12] = funct3
inst[11:7] = rd
inst[6:0] = opcode

*** Examples:
**** LW x4,x0,0x108

imm = 0001 0000 1000
rs1 = 00000
funct3 = 010
rd = 00100
opcode = 0000011

000100001000 00000 010 00100 0000011

0001 0000 1000 0000 0010 0010 0000 0011
   1    0    8    0    2    2    0    3

10802203

**** LW x5,x0,0x107

imm = 0001 0000 0111
rs1 = 00000
funct3 = 010
rd = 00101
opcode = 0000011

000100000111 00000 010 00101 0000011

0001 0000 0111 0000 0010 0010 1000 0011
   1    0    7    0    2    2    8    3

10702283

** LH
LH rd,rs1,imm

31    20 19   15 14   12 11   7 6      0
_______  ______  _______ ______ _______   
  imm     rs1      func    rd   opcode

inst[31:20] = imm[11:0]
inst[19:15] = rs1
inst[14:12] = funct3
inst[11:7] = rd
inst[6:0] = opcode

**** LH x4,x0,0x108

imm = 1111 1111 1111
rs1 = 00000
funct3 = 001
rd = 00100
opcode = 0000011

111111111111 00000 001 00100 0000011

1111 1111 1111 0000 0001 0010 0000 0011
   F    F    F    0    1    2    0    3

FFF01203

** SUB
SUB rd,rs1,rs2

31    25 24    20 19   15 14  12 11    7 6    0
________ ________ _______ ______ _______ ______
 funct7    rs2      rs1   funct3   rd    opcode

funct7 = inst[31:25]
rs2 = inst[24:20]
rs1 = inst[19:15]
funct3 = inst[14:12]
rd = inst[11:7]
opcode = inst[6:0]

*** Example

**** SUB x4,x3,x2

Add x3 and x2 then store the result to x4

ADD x4,x3,x2

funct7 = 0100000
rs2 = 00010
rs1 = 00011
funct3 = 000
rd = 00100
opcode = 0110011

01000000001000011000001000110011

0100000 00010 00011 000 00100 0110011

0100 0000 0010 0001 1000 0010 0011 0011
   4    0    2    1    8    2    3    3

40218233

** SLL

SUB rd,rs1,rs2

31    25 24    20 19   15 14  12 11    7 6    0
________ ________ _______ ______ _______ ______
 funct7    rs2      rs1   funct3   rd    opcode

funct7 = inst[31:25]
rs2 = inst[24:20]
rs1 = inst[19:15]
funct3 = inst[14:12]
rd = inst[11:7]
opcode = inst[6:0]

*** Example

**** SLL x4,x3,x2

Add x3 and x2 then store the result to x4

ADD x4,x3,x2

funct7 = 0000000
rs2 = 00010
rs1 = 00011
funct3 = 001
rd = 00100
opcode = 0110011

0000000 00010 00011 001 00100 0110011

00000000001000011001001000110011

0000 0000 0010 0001 1000 0010 0011 0011
   0    0    2    1    9    2    3    3

00219233

** ORI
ORI rd,rs1,imm

31    20 19   15 14  12 11    7 6    0
________ _______ ______ _______ ______
  imm      rs1   funct3   rd    opcode

imm = inst[31:20]
rs1 = inst[19:15]
funct3 = inst[14:12]
rd = inst[11:7]
opcode = inst[6:0]

*** Example

**** ORI x4,x3,0xAA

imm = 000010101010
rs1 = 00011
funct3 = 110
rd = 00100
opcode = 0010011

000010101010 00011 110 00100 0010011

00001010101000011110001000010011

0000 1010 1010 0001 1110 0010 0001 0011
   0    A    A    1    E    2    1    3

0AA1E213

** ANDI
ANDI rd,rs1,imm

31    20 19   15 14  12 11    7 6    0
________ _______ ______ _______ ______
  imm      rs1   funct3   rd    opcode

imm = inst[31:20]
rs1 = inst[19:15]
funct3 = inst[14:12]
rd = inst[11:7]
opcode = inst[6:0]

*** Example

**** ANDI x4,x3,0xAA

imm = 000010101010
rs1 = 00011
funct3 = 000
rd = 00100
opcode = 0010011

000010101010 00011 000 00100 0010011

00001010101000011000001000010011

0000 1010 1010 0001 1000 0010 0001 0011
   0    A    A    1    8    2    1    3

0AA18213

** SLLI
SLLI rd,rs1,imm

31    20 19   15 14  12 11    7 6    0
________ _______ ______ _______ ______
  imm      rs1   funct3   rd    opcode

imm = inst[31:20]
rs1 = inst[19:15]
funct3 = inst[14:12]
rd = inst[11:7]
opcode = inst[6:0]

*** Example

**** SLLI x4,x3,0x1

funct7 = 0000000
shamt = 00001
rs1 = 00011
funct3 = 001
rd = 00100
opcode = 0010011

0000000 00001 00011 001 00100 0010011

00000000000100011001001000010011

0000 0000 0001 0001 1001 0010 0001 0011
   0    0    1    1    9    2    1    3

00119213

** SRLI
SRLI rd,rs1,imm

31    20 19   15 14  12 11    7 6    0
________ _______ ______ _______ ______
  imm      rs1   funct3   rd    opcode

imm = inst[31:20]
rs1 = inst[19:15]
funct3 = inst[14:12]
rd = inst[11:7]
opcode = inst[6:0]

*** Example

**** SRLI x4,x3,0x1

funct7 = 0000000
shamt = 00001
rs1 = 00011
funct3 = 101
rd = 00100
opcode = 0010011

0000000 00001 00011 101 00100 0010011

00000000000100011101001000010011

0000 0000 0001 0001 1101 0010 0001 0011
   0    0    1    1    D    2    1    3

0011D213

** SRAI
SRAI rd,rs1,imm

31    20 19   15 14  12 11    7 6    0
________ _______ ______ _______ ______
  imm      rs1   funct3   rd    opcode

imm = inst[31:20]
rs1 = inst[19:15]
funct3 = inst[14:12]
rd = inst[11:7]
opcode = inst[6:0]

*** Example

**** SRAI x4,x3,0x1

funct7 = 0000000
shamt = 00001
rs1 = 00011
funct3 = 101
rd = 00100
opcode = 0010011

0100000 00001 00011 101 00100 0010011

00000000000100011101001000010011

0100 0000 0001 0001 1101 0010 0001 0011
   4    0    1    1    D    2    1    3

4011D213

** ADDI
ADDI rd,rs1,imm

31    20 19   15 14  12 11    7 6    0
________ _______ ______ _______ ______
  imm      rs1   funct3   rd    opcode

imm = inst[31:20]
rs1 = inst[19:15]
funct3 = inst[14:12]
rd = inst[11:7]
opcode = inst[6:0]

*** Example

**** ADDI x4,x3,0x1

imm = 000000000001
rs1 = 00011
funct3 = 000
rd = 00100
opcode = 0010011

000000000001 00011 000 00100 0010011

0000 0000 0001 0001 1000 0010 0001 0011
   0    0    1    1    8    2    1    3

00118213

** XORI

** XOR

XOR rd,rs1,rs2

31    25 24    20 19   15 14  12 11    7 6    0
________ ________ _______ ______ _______ ______
 funct7    rs2      rs1   funct3   rd    opcode

funct7 = inst[31:25]
rs2 = inst[24:20]
rs1 = inst[19:15]
funct3 = inst[14:12]
rd = inst[11:7]
opcode = inst[6:0]

*** Example

**** XOR x4,x3,x2

XOR x3 and x2 then store the result to x4

XOR x4,x3,x2

funct7 = 0000000
rs2 = 00010
rs1 = 00011
funct3 = 100
rd = 00100
opcode = 0110011

0000000 00010 00011 100 00100 0110011

0000 0000 0010 0001 1100 0010 0011 0011



0000 0000 0010 0001 1100 0010 0011 0011
   0    0    2    1    C    2    3    3

0021C233

** OR

OR rd,rs1,rs2

31    25 24    20 19   15 14  12 11    7 6    0
________ ________ _______ ______ _______ ______
 funct7    rs2      rs1   funct3   rd    opcode

funct7 = inst[31:25]
rs2 = inst[24:20]
rs1 = inst[19:15]
funct3 = inst[14:12]
rd = inst[11:7]
opcode = inst[6:0]

*** Example

**** OR x4,x3,x2

OR x3 and x2 then store the result to x4

OR x4,x3,x2

funct7 = 0000000
rs2 = 00010
rs1 = 00011
funct3 = 110
rd = 00100
opcode = 0110011

0000000 00010 00011 100 00100 0110011

0000 0000 0010 0001 1110 0010 0011 0011



0000 0000 0010 0001 1100 0010 0011 0011
   0    0    2    1    E    2    3    3

0021E233

** AND

AND rd,rs1,rs2

31    25 24    20 19   15 14  12 11    7 6    0
________ ________ _______ ______ _______ ______
 funct7    rs2      rs1   funct3   rd    opcode

funct7 = inst[31:25]
rs2 = inst[24:20]
rs1 = inst[19:15]
funct3 = inst[14:12]
rd = inst[11:7]
opcode = inst[6:0]

*** Example

**** AND x4,x3,x2

AND x3 and x2 then store the result to x4

AND x4,x3,x2

funct7 = 0000000
rs2 = 00010
rs1 = 00011
funct3 = 111
rd = 00100
opcode = 0110011

0000000 00010 00011 111 00100 0110011

0000 0000 0010 0001 1111 0010 0011 0011



0000 0000 0010 0001 1111 0010 0011 0011
   0    0    2    1    F    2    3    3

0021F233

** SLTI
SLTI rd,rs1,imm

31    20 19   15 14  12 11    7 6    0
________ _______ ______ _______ ______
  imm      rs1   funct3   rd    opcode

imm = inst[31:20]
rs1 = inst[19:15]
funct3 = inst[14:12]
rd = inst[11:7]
opcode = inst[6:0]

*** Example

**** SLTI x4,x3,0x1

imm = 000000000001
rs1 = 00011
funct3 = 010
rd = 00100
opcode = 0010011

000000000001 00011 010 00100 0010011

0000 0000 0001 0001 1010 0010 0001 0011
   0    0    1    1    A    2    1    3

0011A213

** SLTIU
SLTIU rd,rs1,imm

31    20 19   15 14  12 11    7 6    0
________ _______ ______ _______ ______
  imm      rs1   funct3   rd    opcode

imm = inst[31:20]
rs1 = inst[19:15]
funct3 = inst[14:12]
rd = inst[11:7]
opcode = inst[6:0]

*** Example

**** SLTIU x4,x3,0x1

imm = 000000000001
rs1 = 00011
funct3 = 010
rd = 00100
opcode = 0010011

000000000001 00011 011 00100 0010011

0000 0000 0001 0001 1011 0010 0001 0011
   0    0    1    1    B    2    1    3

0011B213

** SLT
SLT rd,rs1,rs2

31    25 24    20 19   15 14  12 11    7 6    0
________ ________ _______ ______ _______ ______
 funct7    rs2      rs1   funct3   rd    opcode

funct7 = inst[31:25]
rs2 = inst[24:20]
rs1 = inst[19:15]
funct3 = inst[14:12]
rd = inst[11:7]
opcode = inst[6:0]

*** Example

**** SLT x4,x3,x2

SLT x3 and x2 then store the result to x4

SLT x4,x3,x2

funct7 = 0000000
rs2 = 00010
rs1 = 00011
funct3 = 010
rd = 00100
opcode = 0110011

0000000 00010 00011 010 00100 0110011

0000 0000 0010 0001 1010 0010 0011 0011



0000 0000 0010 0001 1010 0010 0011 0011
   0    0    2    1    A    2    3    3

0021A233

** SLTU
SLTU rd,rs1,rs2

31    25 24    20 19   15 14  12 11    7 6    0
________ ________ _______ ______ _______ ______
 funct7    rs2      rs1   funct3   rd    opcode

funct7 = inst[31:25]
rs2 = inst[24:20]
rs1 = inst[19:15]
funct3 = inst[14:12]
rd = inst[11:7]
opcode = inst[6:0]

*** Example

**** SLTU x4,x3,x2

SLT x3 and x2 then store the result to x4

SLT x4,x3,x2

funct7 = 0000000
rs2 = 00010
rs1 = 00011
funct3 = 011
rd = 00100
opcode = 0110011

0000000 00010 00011 011 00100 0110011

0000 0000 0010 0001 1011 0010 0011 0011



0000 0000 0010 0001 1011 0010 0011 0011
   0    0    2    1    B    2    3    3

0021B233

** LB
LB rd,rs1,imm

31    20 19   15 14   12 11   7 6      0
_______  ______  _______ ______ _______   
  imm     rs1      func    rd   opcode

inst[31:20] = imm[11:0]
inst[19:15] = rs1
inst[14:12] = funct3
inst[11:7] = rd
inst[6:0] = opcode

*** Examples:
**** LB x4,x0,0x108

imm = 0001 0000 1000
rs1 = 00000
funct3 = 010
rd = 00100
opcode = 0000011

000100001000 00000 000 00100 0000011

0001 0000 1000 0000 0000 0010 0000 0011
   1    0    8    0    0    2    0    3

10800203

** LH
LH rd,rs1,imm

31    20 19   15 14   12 11   7 6      0
_______  ______  _______ ______ _______   
  imm     rs1      func    rd   opcode

inst[31:20] = imm[11:0]
inst[19:15] = rs1
inst[14:12] = funct3
inst[11:7] = rd
inst[6:0] = opcode

*** Examples:
**** LH x4,x0,0x108

imm = 0001 0000 1000
rs1 = 00000
funct3 = 001
rd = 00100
opcode = 0000011

0001 0000 1000 00000 001 00100 0000011

0001 0000 1000 0000 0001 0010 0000 0011
   1    0    8    0    1    2    0    3

10801203

** SB

SB rs1,rs2,imm

31    25 24   20 19    15 14   12 11   7 6    0
________ _______ ________ _______ ______ ______
  imm      rs2     rs1     funct3  imm   opcode

*** Examples

**** SB x2,x0,imm

Store the contents of register x2 to memory address 0x0108

SB x2,x0,0x8

imm = 0001 0000 1000
rs1 = 00000
rs2 = 00010
funct3 = 000
opcode = 0100011

imm = {inst[31:25],inst[11:7]}
rs2 = inst[24:20]
rs1 = inst[19:15]
funct3 = inst[14:12]
opcode = inst[6:0]

0001000 00010 00000 000 01000 0100011

0001 0000 0010 0000 0000 0100 0010 0011
   0    0    2    0    0    4    2    3

10200423

** SH

SH rs1,rs2,imm

31    25 24   20 19    15 14   12 11   7 6    0
________ _______ ________ _______ ______ ______
  imm      rs2     rs1     funct3  imm   opcode

*** Examples

**** SH x2,x0,imm

Store the contents of register x2 to memory address 0x0108

SH x2,x0,0x8

imm = 0001 0000 1000
rs1 = 00000
rs2 = 00010
funct3 = 001
opcode = 0100011

imm = {inst[31:25],inst[11:7]}
rs2 = inst[24:20]
rs1 = inst[19:15]
funct3 = inst[14:12]
opcode = inst[6:0]

0001000 00010 00000 001 01000 0100011

0001 0000 0010 0000 0001 0100 0010 0011
   0    0    2    0    1    4    2    3

10201423

** LBU
LBU rd,rs1,imm

31    20 19   15 14   12 11   7 6      0
_______  ______  _______ ______ _______   
  imm     rs1      func    rd   opcode

inst[31:20] = imm[11:0]
inst[19:15] = rs1
inst[14:12] = funct3
inst[11:7] = rd
inst[6:0] = opcode

*** Examples:
**** LBU x4,x0,0x108

imm = 0001 0000 1000
rs1 = 00000
funct3 = 100
rd = 00100
opcode = 0000011

000100001000 00000 100 00100 0000011

0001 0000 1000 0000 0100 0010 0000 0011
   1    0    8    0    4    2    0    3

10804203

** LHU
LHU rd,rs1,imm

31    20 19   15 14   12 11   7 6      0
_______  ______  _______ ______ _______   
  imm     rs1      func    rd   opcode

inst[31:20] = imm[11:0]
inst[19:15] = rs1
inst[14:12] = funct3
inst[11:7] = rd
inst[6:0] = opcode

*** Examples:
**** LHU x4,x0,0x108

imm = 0001 0000 1000
rs1 = 00000
funct3 = 101
rd = 00100
opcode = 0000011

000100001000 00000 101 00100 0000011

0001 0000 1000 0000 0101 0010 0000 0011
   1    0    8    0    5    2    0    3

10805203

** SRL

SRL rd,rs1,rs2

31    25 24    20 19   15 14  12 11    7 6    0
________ ________ _______ ______ _______ ______
 funct7    rs2      rs1   funct3   rd    opcode

funct7 = inst[31:25]
rs2 = inst[24:20]
rs1 = inst[19:15]
funct3 = inst[14:12]
rd = inst[11:7]
opcode = inst[6:0]

*** Example

**** SRL x4,x3,x2

SRL x3 and x2 then store the result to x4

SRL x4,x3,x2

funct7 = 0000000
rs2 = 00010
rs1 = 00011
funct3 = 101
rd = 00100
opcode = 0110011

0000000 00010 00011 101 00100 0110011

0000 0000 0010 0001 1101 0010 0011 0011



0000 0000 0010 0001 1101 0010 0011 0011
   0    0    2    1    D    2    3    3

0021D233

** SRA

SRA rd,rs1,rs2

31    25 24    20 19   15 14  12 11    7 6    0
________ ________ _______ ______ _______ ______
 funct7    rs2      rs1   funct3   rd    opcode

funct7 = inst[31:25]
rs2 = inst[24:20]
rs1 = inst[19:15]
funct3 = inst[14:12]
rd = inst[11:7]
opcode = inst[6:0]

*** Example

**** SRA x4,x3,x2

SRA x3 and x2 then store the result to x4

SRA x4,x3,x2

funct7 = 0100000
rs2 = 00010
rs1 = 00011
funct3 = 101
rd = 00100
opcode = 0110011

0000000 00010 00011 101 00100 0110011

0000 0000 0010 0001 1101 0010 0011 0011



0100 0000 0010 0001 1101 0010 0011 0011
   4    0    2    1    D    2    3    3

4021D233

** AUIPC

AUIPC rd,imm

31     12 11  7 6    0
_________ _____ ______
   imm     rd   opcode

imm = inst[31:12]
rd = inst[11:7]
opcode = inst[6:0]

*** Example
**** Add 3 to PC and store it to x3

AUIPC x3,0x3

imm = 0000 0000 0000 0000 0011
rd = 00011
opcode = 0010111

00000000000000000011000110010111

0000 0000 0000 0000 0011 0001 1001 0111
   0    0    0    0    3    1    9    7

00003197

**** Add 2 to PC and store it to x2

AUIPC x2,0x2

imm = 0000 0000 0000 0000 0010
rd = 00010
opcode = 0010111

00000000000000000010000100010111

0000 0000 0000 0000 0010 0001 0001 0111
   0    0    0    0    2    1    1    7

00002117

** tstPattern0002.txt
+00000000 000031B7 ; LUI x3,0x3     -> x3 = 3
+00000001 00002137 ; LUI x2,0x2     -> x2 = 2
+00000002 00218233 ; ADD x4,x3,x2   -> x4 = 3 + 2
+00000003 10202423 ; SW x2,x0,0x108   -> mem[0x108] = 2
+00000004 103023a3 ; SW x3,x0,0x107   -> mem[0x107] = 3
+00000005 FFFFFFFF

** tstPattern0003.txt
+00000000 000031B7 ; LUI x3,0x3     -> x3 = 3
+00000001 00002137 ; LUI x2,0x2     -> x2 = 2
+00000002 00218233 ; ADD x4,x3,x2   -> x4 = 3 + 2
+00000003 10202423 ; SW x2,x0,0x108   -> mem[0x108] = 2
+00000004 103023a3 ; SW x3,x0,0x107   -> mem[0x107] = 3
+00000005 10802203 ; LW x4,x0,0x108   -> mem[0x108] = 2
+00000006 10702283 ; LW x5,x0,0x107   -> mem[0x107] = 3
+00000007 FFFFFFFF
** tstPattern0004.asm
LUI x3,0x32
LUI x2,0x23
ADD x4,x3,x2
ADD x5,x4,x2
SW x2,x0,0x108
SW x3,x0,0x107
SW x4,x0,0x105
SW x5,x0,0x106
LW x4,x0,0x108
LW x5,x0,0x107
SW x4,x0,0x105
SW x5,x0,0x106
LUI x3,0x1
SW x5,x3,0x108
** tstPattern0005.asm
LUI x2,0x5                      ; this is a comment
LUI x3,0x6
LUI x1,0x2	
SW x2,x0,0x108
SW x3,x0,0x107
SW x2,x1,0x102

** (LH) tstPattern0006.asm
LUI x5,0xFFF
SW x5,x0,0x108
LH x4,x0,0x108

** (SUB) tstPattern0007.asm
LUI x3,0x123
LUI x2,0x1
SUB x3,x3,x2
SUB x3,x3,x2
SUB x3,x3,x2

** (SLL) tstPattern0008.asm
LUI x3,0x123
LUI x2,0x1
SLL x4,x3,x2
SLL x3,x3,x2
SLL x3,x3,x2
SLL x3,x3,x2

** (ADDI) tstPattern0009.asm
ORI x4,x3,0xAA
ORI x4,x3,0x55

** (SLLI) tstPattern0012.asm
ORI x3,x3,0x1	
ORI x4,x3,0x1
SLLI x4,x4,0x1
SLLI x4,x4,0x1
SLLI x4,x4,0x1
ORI x4,x4,0x2
SLLI x4,x3,0x1
SLLI x4,x4,0x1
SLLI x4,x4,0x1
SLLI x4,x4,0x2

** (SRLI) tstPattern0013.asm
** (SRAI) tstPattern0014.asm
LUI x3,0x100
ORI x4,x3,0x1
SRAI x4,x3,0x1

** (ADDI) tstPattern0015.asm
ADDI x3,x0,0x1                  ;x3 = 1
ADDI x3,x3,0x2                  ;x3 = 1 + 2 = 3
ADDI x3,x3,0x3                  ;x3 = 3 + 3 = 6
ADDI x3,x3,0x4                  ;x3 = 6 + 4 = 10
ADDI x3,x3,0x5                  ;x3 = 10 + 5
ADDI x4,x3,0x6                  ;x4 = 21
ADDI x4,x3,0x7                  ;x4 = 22
ADDI x4,x3,0x8                  ;x4 = 23
ADDI x4,x3,0x9                  ;x4 = 24
ADDI x3,x4,0x9                  ;x3 = 33
** (XORI) tstPattern0016.asm
ORI x3,0xDEAD
XORI x4,x3,0xBEAF
XORI x4,x3,0xBEAF
** (XOR) tstPattern0017.asm
ORI x3,x0,0xFFF
ORI x2,x0,0x0F0   
XOR x4,x3,x2
ORI x2,x0,0xF0F   
XOR x4,x3,x2
** (OR) tstPattern0018.asm
ORI x3,x0,0xFFF
ORI x2,x0,0x0F0   
OR x4,x3,x2
ORI x2,x0,0xF0F   
OR x4,x3,x2
** (AND) tstPattern0019.asm
ORI x3,x0,0xFFF
ORI x2,x0,0x0F0   
AND x4,x3,x2
ORI x2,x0,0xF0F   
AND x4,x3,x2
** (SLTI) tstPattern0020.asm
ORI x3,x0,0x3
SLTI x4,x3,0x4
ORI x3,x0,0x4
SLTI x4,x3,0x3
** (SLTIU) tstPattern0021.asm
ORI x3,x0,0x3
SLTIU x4,x3,0x4
ORI x3,x0,0x4
SLTIU x4,x3,0x3
** (SLT) tstPattern0022.asm
ORI x3,x0,0x3
ORI x4,x0,0x4
SLT x5,x3,x4
ORI x3,x0,0x4
ORI x4,x0,0x3
SLT x5,x3,x4
ORI x2,x0,0x3
SLT x4,x3,x2
** (SLTU) tstPattern0023.asm
ORI x3,x0,0x3                   ;x3 = 0x3
ORI x4,x0,0x4                   ;x4 = 0x4
SLTU x5,x3,x4                    ;x5 = 1
ORI x3,x0,0x4                   ;x3 = 0x4
ORI x4,x0,0x3                   ;x4 = 0x3
SLTU x5,x3,x4                    ;x5 = 0
ORI x2,x0,0x3
SLTU x4,x3,x2

** (LH) tstPattern0025.asm
LUI x3,0xABCDE
ORI x3,x3,0xFDE
SW x3,x0,0x108
LW x4,x0,0x108
LH x5,x0,0x108
LH x4,x0,0x108
** (SB) tstPattern0026.asm
SB x2,x0,0x8
LUI x3,0xABCDE
ORI x3,x3,0xFDE
SB x3,x0,0x108
LUI x4,0xABCDE
ORI x4,x4,0xFDE
SB x4,x0,0x108
** (SH) tstPattern0027.asm
SH x2,x0,0x8
LUI x3,0xABCDE
ORI x3,x3,0xFDE
SH x3,x0,0x108
LUI x4,0xABCDE
ORI x4,x4,0xFDE
SH x4,x0,0x108

** (LBU) tstPattern0028.asm
LUI x3,0xABCDE
ORI x3,x3,0xFDE
SW x3,x0,0x108
LW x4,x0,0x108
LBU x5,x0,0x108

** (LHU) tstPattern0029.asm
LUI x3,0xABCDE
ORI x3,x3,0xFDE
SW x3,x0,0x108
LW x4,x0,0x108
LHU x5,x0,0x108

** (SRL) tstPattern0030.asm
LUI x3,0xFFF
ORI x3,x3,0xFFF
ORI x2,x0,0x1	
SRL x4,x3,x2
SRL x4,x4,x2
SRL x4,x4,x2
SRL x4,x4,x2
SRL x4,x4,x2
SRL x4,x4,x2
SRL x4,x4,x2
SRL x4,x4,x2
SRL x4,x4,x2
SRL x4,x4,x2
SRL x4,x4,x2
SRL x4,x4,x2
SRL x4,x4,x2
SRL x4,x4,x2
SRL x4,x4,x2
SRL x4,x4,x2
SRL x4,x4,x2
SRL x4,x4,x2
SRL x4,x4,x2
SRL x4,x4,x2
SRL x4,x4,x2
SRL x4,x4,x2
SRL x4,x4,x2
SRL x4,x4,x2
** (SRA) tstPattern0031.asm
LUI x3,x0,0xFFF
ORI x3,x3,0xABC
ORI x2,x0,0x1
SRA x4,x3,x2
SRA x4,x4,x2
SRA x4,x4,x2
SRA x4,x4,x2
SRA x4,x4,x2
SRA x4,x4,x2
** (labels) tstPattern0032.asm
* Misc
** DONE test with RVld fixed to 1
   CLOSED: [2017-03-27 Mon 14:01]
   :PROPERTIES:
   :END:
   :LOGBOOK:  
   CLOCK: [2017-03-27 Mon 13:08]--[2017-03-27 Mon 14:01] =>  0:53
   :END:      
   :PROPERTIES:
   :Effort:   0:30
   :END:
** DONE add error handler in testbench
   CLOSED: [2017-02-15 Wed 09:30]
   :PROPERTIES:
   :END:
   :LOGBOOK:  
   CLOCK: [2017-02-15 Wed 09:30]--[2017-02-15 Wed 09:53] =>  0:23
   CLOCK: [2017-02-15 Wed 09:29]--[2017-02-15 Wed 09:30] =>  0:01
   :END:      
   :PROPERTIES:
   :Effort:   0:10
   :END:
** DONE add generating error in rtl
   CLOSED: [2017-02-15 Wed 09:29]
   :PROPERTIES:
   :END:
   :LOGBOOK:  
   CLOCK: [2017-02-15 Wed 09:26]--[2017-02-15 Wed 09:29] =>  0:03
   :END:      
   :PROPERTIES:
   :Effort:   0:10
   :END:
** TODO add debugging signals & strings
** DONE add support to labels in assembler
   CLOSED: [2017-03-01 Wed 11:28]
   :PROPERTIES:
   :END:
   :LOGBOOK:  
   CLOCK: [2017-03-01 Wed 09:21]--[2017-03-01 Wed 11:28] =>  2:07
   CLOCK: [2017-02-28 Tue 08:54]--[2017-02-28 Tue 08:58] =>  0:04
   :END:      
   :PROPERTIES:
   :Effort:   0:30
   :END:
** DONE add symbol table and program code array
   CLOSED: [2017-03-01 Wed 13:11]
   :PROPERTIES:
   :END:
   :LOGBOOK:  
   CLOCK: [2017-03-01 Wed 12:59]--[2017-03-01 Wed 13:11] =>  0:12
   CLOCK: [2017-03-01 Wed 11:31]--[2017-03-01 Wed 11:45] =>  0:14
   :END:      
   :PROPERTIES:
   :Effort:   1:00
   :END:
** DONE add labels support for AUIPC
   CLOSED: [2017-03-14 Tue 10:09]
** DONE labels support to LUI
   CLOSED: [2017-03-09 Thu 11:17]
   :PROPERTIES:
   :END:
   :LOGBOOK:  
   CLOCK: [2017-03-08 Wed 09:02]--[2017-03-08 Wed 10:00] =>  0:58
   :END:      
   :PROPERTIES:
   :Effort:   1:00
   :END:
** DONE labels support
   CLOSED: [2017-03-16 Thu 10:05]
   :PROPERTIES:
   :END:
   :LOGBOOK:  
   CLOCK: [2017-03-16 Thu 10:04]--[2017-03-16 Thu 10:05] =>  0:01
   CLOCK: [2017-03-16 Thu 09:49]--[2017-03-16 Thu 09:52] =>  0:03
   CLOCK: [2017-03-16 Thu 09:39]--[2017-03-16 Thu 09:40] =>  0:01
   CLOCK: [2017-03-13 Mon 10:32]--[2017-03-13 Mon 10:39] =>  0:07
   :END:      
   :PROPERTIES:
   :Effort:   3:45
   :END:
*** DONE AUIPC
    CLOSED: [2017-03-09 Thu 12:20]
    :PROPERTIES:
    :END:
    :LOGBOOK:  
    CLOCK: [2017-03-09 Thu 11:38]--[2017-03-09 Thu 11:45] =>  0:07
    :END:      
    :PROPERTIES:
    :Effort:   0:15
    :END:
*** DONE LB
    CLOSED: [2017-03-09 Thu 12:32]
    :PROPERTIES:
    :END:
    :LOGBOOK:  
    CLOCK: [2017-03-09 Thu 12:21]--[2017-03-09 Thu 12:32] =>  0:11
    :END:      
    :PROPERTIES:
    :Effort:   0:15
    :END:
*** DONE LH
    CLOSED: [2017-03-09 Thu 17:32]
    :PROPERTIES:
    :END:
    :LOGBOOK:  
    CLOCK: [2017-03-09 Thu 12:34]--[2017-03-09 Thu 13:04] =>  0:30
    :END:      
    :PROPERTIES:
    :Effort:   0:15
    :END:
*** DONE LW
    CLOSED: [2017-03-09 Thu 18:06]
    :PROPERTIES:
    :END:
    :LOGBOOK:  
    CLOCK: [2017-03-09 Thu 17:32]--[2017-03-09 Thu 17:57] =>  0:25
    :END:      
    :PROPERTIES:
    :Effort:   0:15
    :END:
*** DONE LHU
    CLOSED: [2017-03-13 Mon 10:39]
*** DONE SB
    CLOSED: [2017-03-13 Mon 10:45]
    :PROPERTIES:
    :END:
    :LOGBOOK:  
    CLOCK: [2017-03-13 Mon 10:39]--[2017-03-13 Mon 10:45] =>  0:06
    :END:      
    :PROPERTIES:
    :Effort:   0:15
    :END:
*** DONE SH
    CLOSED: [2017-03-13 Mon 10:32]
    :PROPERTIES:
    :END:
    :LOGBOOK:  
    CLOCK: [2017-03-13 Mon 10:13]--[2017-03-13 Mon 10:32] =>  0:19
    :END:      
    :PROPERTIES:
    :Effort:   0:15
    :END:
*** DONE SW
    CLOSED: [2017-03-10 Fri 10:26]
    :PROPERTIES:
    :END:
    :LOGBOOK:  
    CLOCK: [2017-03-10 Fri 10:10]--[2017-03-10 Fri 10:26] =>  0:16
    :END:      
    :PROPERTIES:
    :Effort:   0:15
    :END:
*** DONE SLTI
    CLOSED: [2017-03-13 Mon 12:41]
    :PROPERTIES:
    :END:
    :LOGBOOK:  
    CLOCK: [2017-03-13 Mon 10:45]--[2017-03-13 Mon 11:03] =>  0:18
    :END:      
    :PROPERTIES:
    :Effort:   0:15
    :END:
*** DONE SLTIU
    CLOSED: [2017-03-14 Tue 10:39]
    :PROPERTIES:
    :END:
    :LOGBOOK:  
    CLOCK: [2017-03-14 Tue 10:11]--[2017-03-14 Tue 10:39] =>  0:28
    :END:      
    :PROPERTIES:
    :Effort:   0:15
    :END:
*** DONE XORI
    CLOSED: [2017-03-15 Wed 12:35]
    :PROPERTIES:
    :END:
    :LOGBOOK:  
    CLOCK: [2017-03-15 Wed 12:30]--[2017-03-15 Wed 12:35] =>  0:05
    :END:      
    :PROPERTIES:
    :Effort:   0:15
    :END:
*** DONE ORI
    CLOSED: [2017-03-15 Wed 12:45]
    :PROPERTIES:
    :END:
    :LOGBOOK:  
    CLOCK: [2017-03-15 Wed 12:42]--[2017-03-15 Wed 12:45] =>  0:03
    :END:      
    :PROPERTIES:
    :Effort:   0:15
    :END:
*** DONE ANDI
    CLOSED: [2017-03-16 Thu 09:21]
    :PROPERTIES:
    :END:
    :LOGBOOK:  
    CLOCK: [2017-03-16 Thu 09:18]--[2017-03-16 Thu 09:21] =>  0:03
    :END:      
    :PROPERTIES:
    :Effort:   0:15
    :END:
*** DONE SLLI
    CLOSED: [2017-03-16 Thu 09:24]
    :PROPERTIES:
    :END:
    :LOGBOOK:  
    CLOCK: [2017-03-16 Thu 09:21]--[2017-03-16 Thu 09:24] =>  0:03
    :END:      
    :PROPERTIES:
    :Effort:   0:15
    :END:
*** DONE SRLI
    CLOSED: [2017-03-16 Thu 09:39]
    :PROPERTIES:
    :END:
    :LOGBOOK:  
    CLOCK: [2017-03-16 Thu 09:25]--[2017-03-16 Thu 09:39] =>  0:14
    :END:      
    :PROPERTIES:
    :Effort:   0:15
    :END:
*** DONE SRAI
    CLOSED: [2017-03-16 Thu 09:49]
    :PROPERTIES:
    :END:
    :LOGBOOK:  
    CLOCK: [2017-03-16 Thu 09:40]--[2017-03-16 Thu 09:49] =>  0:09
    :END:      
    :PROPERTIES:
    :Effort:   0:15
    :END:
*** DONE ADDI
    CLOSED: [2017-03-16 Thu 10:04]
    :PROPERTIES:
    :END:
    :LOGBOOK:  
    CLOCK: [2017-03-16 Thu 09:52]--[2017-03-16 Thu 10:04] =>  0:12
    :END:      
    :PROPERTIES:
    :Effort:   0:15
    :END:
*** CANCELLED ADD                                                 :CANCELLED:
    CLOSED: [2017-03-16 Thu 09:18]
    - State "CANCELLED"  from "TODO"       [2017-03-16 Thu 09:18]
*** CANCELLED SUB                                                 :CANCELLED:
    CLOSED: [2017-03-16 Thu 09:18]
    - State "CANCELLED"  from "TODO"       [2017-03-16 Thu 09:18]
*** CANCELLED SLL                                                 :CANCELLED:
    CLOSED: [2017-03-16 Thu 09:18]
    :PROPERTIES:
    :END:
    - State "CANCELLED"  from "TODO"       [2017-03-16 Thu 09:18]
    :LOGBOOK:  
    CLOCK: [2017-02-01 Wed 16:33]--[2017-02-01 Wed 17:57] =>  1:24
    :END:      
    :PROPERTIES:
    :Effort:   0:30
    :END:
*** CANCELLED SLTU                                                :CANCELLED:
    CLOSED: [2017-03-16 Thu 09:18]
    - State "CANCELLED"  from "TODO"       [2017-03-16 Thu 09:18]
*** CANCELLED XOR                                                 :CANCELLED:
    CLOSED: [2017-03-16 Thu 09:18]
    - State "CANCELLED"  from "TODO"       [2017-03-16 Thu 09:18]
*** CANCELLED SRL                                                 :CANCELLED:
    CLOSED: [2017-03-16 Thu 09:18]
    - State "CANCELLED"  from "TODO"       [2017-03-16 Thu 09:18]
*** CANCELLED SRA                                                 :CANCELLED:
    CLOSED: [2017-03-16 Thu 09:18]
    - State "CANCELLED"  from "TODO"       [2017-03-16 Thu 09:18]
*** CANCELLED OR                                                  :CANCELLED:
    CLOSED: [2017-03-16 Thu 09:18]
    - State "CANCELLED"  from "TODO"       [2017-03-16 Thu 09:18]
*** CANCELLED AND                                                 :CANCELLED:
    CLOSED: [2017-03-16 Thu 09:18]
    - State "CANCELLED"  from "TODO"       [2017-03-16 Thu 09:18]
** DONE add dw to assembler
   CLOSED: [2017-03-10 Fri 10:10]
   :PROPERTIES:
   :END:
   :LOGBOOK:  
   CLOCK: [2017-03-09 Thu 18:23]--[2017-03-09 Thu 19:00] =>  0:37
   :END:      
   :PROPERTIES:
   :Effort:   0:30
   :END:
** DONE test LUI with dw
   CLOSED: [2017-03-10 Fri 22:30]
** DONE added ABI names to registers x0 to x31
   CLOSED: [2017-03-27 Mon 14:35]
** DONE add immediate boundary check [37/37]
   CLOSED: [2017-04-04 Tue 09:11]
   :PROPERTIES:
   :END:
   :LOGBOOK:  
   CLOCK: [2017-04-04 Tue 09:01]--[2017-04-04 Tue 09:11] =>  0:10
   CLOCK: [2017-04-03 Mon 11:59]--[2017-04-03 Mon 12:49] =>  0:50
   CLOCK: [2017-03-31 Fri 12:25]--[2017-03-31 Fri 12:45] =>  0:20
   CLOCK: [2017-03-30 Thu 08:32]--[2017-03-30 Thu 09:19] =>  0:47
   :END:      
   :PROPERTIES:
   :Effort:   2:00
   :END:
   - [X] LUIpattern
   - [X] ADDpattern
   - [X] SWpattern
   - [X] LWpattern
   - [X] LHpattern
   - [X] SUBpattern
   - [X] SLLpattern
   - [X] ORIpattern
   - [X] ANDIpattern
   - [X] SLLIpattern
   - [X] SRLIpattern
   - [X] SRAIpattern
   - [X] ADDIpattern
   - [X] XORIpattern
   - [X] XORpattern
   - [X] ORpattern
   - [X] ANDpattern
   - [X] SLTIpattern
   - [X] SLTIUpattern
   - [X] SLTpattern
   - [X] SLTUpattern
   - [X] LBpattern
   - [X] SBpattern
   - [X] SHpattern
   - [X] LBUpattern
   - [X] LHUpattern
   - [X] SRLpattern
   - [X] SRApattern
   - [X] AUIPCpattern
   - [X] JALpattern
   - [X] JALRpattern
   - [X] BEQpattern
   - [X] BNEpattern
   - [X] BLTpattern
   - [X] BGEpattern
   - [X] BLTUpattern
   - [X] BGEUpattern

** TODO fix bug in immediate boundary check [37/37]
   :PROPERTIES:
   :Effort:   2:00
   :END:
   :LOGBOOK:  
   CLOCK: [2017-04-04 Tue 09:01]--[2017-04-04 Tue 09:11] =>  0:10
   CLOCK: [2017-04-03 Mon 11:59]--[2017-04-03 Mon 12:49] =>  0:50
   CLOCK: [2017-03-31 Fri 12:25]--[2017-03-31 Fri 12:45] =>  0:20
   CLOCK: [2017-03-30 Thu 08:32]--[2017-03-30 Thu 09:19] =>  0:47
   :END:      
   Labels are not yet fixed
   - [X] LUIpattern
   - [X] ADDpattern
   - [X] SWpattern
   - [X] LWpattern
   - [X] LHpattern
   - [X] SUBpattern
   - [X] SLLpattern
   - [X] ORIpattern
   - [X] ANDIpattern
   - [X] SLLIpattern
   - [X] SRLIpattern
   - [X] SRAIpattern
   - [X] ADDIpattern
   - [X] XORIpattern
   - [X] XORpattern
   - [X] ORpattern
   - [X] ANDpattern
   - [X] SLTIpattern
   - [X] SLTIUpattern
   - [X] SLTpattern
   - [X] SLTUpattern
   - [X] LBpattern
   - [X] SBpattern
   - [X] SHpattern
   - [X] LBUpattern
   - [X] LHUpattern
   - [X] SRLpattern
   - [X] SRApattern
   - [X] AUIPCpattern
   - [X] JALpattern
   - [X] JALRpattern
   - [X] BEQpattern
   - [X] BNEpattern
   - [X] BLTpattern
   - [X] BGEpattern
   - [X] BLTUpattern
   - [X] BGEUpattern

* Notes
** The Assembler
   :PROPERTIES:
    :COLUMNS:  %25ITEM %ABI_Name %Description %Saver
   :END:

ABI Name of the registers
*** x0
    :PROPERTIES:
    :ABI_Name: zero
    :Description: Hard-wired zero
    :Saver:    -
    :END:
*** x1
    :PROPERTIES:
    :ABI_NAME: ra
    :DESCRIPTION: Return Address
    :SAVER:    Caller
    :END:
*** x2
    :PROPERTIES:
    :ABI_NAME: sp
    :DESCRIPTION: Stack Pointer
    :SAVER:    Callee
    :END:
*** x3
    :PROPERTIES:
    :ABI_NAME: gp
    :DESCRIPTION: Global Pointer
    :SAVER:    -
    :END:
*** x4
    :PROPERTIES:
    :ABI_NAME: tp
    :DESCRIPTION: Thread Pointer
    :SAVER:    Caller
    :END:
*** x5-7
    :PROPERTIES:
    :DESCRIPTION: Temporaries
    :ABI_NAME: t0-2
    :SAVER:    Caller
    :END:
*** x8
    :PROPERTIES:
    :ABI_NAME: s0/fp
    :DESCRIPTION: Saved Register/frame pointer
    :SAVER:    Callee
    :END:
*** x9
    :PROPERTIES:
    :ABI_NAME: s1
    :DESCRIPTION: Saved Register
    :SAVER:    Callee
    :END:
*** x10-11
    :PROPERTIES:
    :ABI_NAME: a0-1
    :DESCRIPTION: Function arguments/return values
    :SAVER:    Caller
    :END:
*** x12-17
    :PROPERTIES:
    :ABI_NAME: a2-7
    :DESCRIPTION: Function arguments
    :SAVER:    Caller
    :END:
*** x18-27
    :PROPERTIES:
    :ABI_NAME: s2-11
    :DESCRIPTION: Saved register
    :SAVER:    Callee
    :END:
*** x28-31
    :PROPERTIES:
    :ABI_NAME: t3-6
    :DESCRIPTION: Temporaries
    :SAVER:    Caller
    :END:
** Main function
Source file in C
#+begin_src C :tangle ../sim/mainfun.c
  int main() {
    return 0;
  }
#+end_src            

Generated by GCC
#+begin_src asm
  0x000101dc <+0>:     addi    sp,sp,-16
  0x000101e0 <+4>:     sw      s0,12(sp)
  0x000101e4 <+8>:     addi    s0,sp,16
  0x000101e8 <+12>:    li      a5,0
  0x000101ec <+16>:    mv      a0,a5
  0x000101f0 <+20>:    lw      s0,12(sp)
  0x000101f4 <+24>:    addi    sp,sp,16
  0x000101f8 <+28>:    ret
#+end_src            

#+begin_src asm :tangle ../sim/tstPattern0067.asm
  addi    sp,sp,-16
  sw      s0,sp,12
  addi    s0,sp,16
  li      a5,0
  mv      a0,a5
  lw      s0,sp,12
  addi    sp,sp,16
  ret
#+end_src            
** Calling functions
Source file in C
#+begin_src C :tangle ../sim/callingfun.c
  #include <stdio.h>
  void f() {
    int x;
  }

  void g() {
    int x;
  }

  void h() {
    int x;
  }

  int main() {
    f();
    g();
    h();
    return 0;
  }
#+end_src            

Generated by GCC
#+begin_src asm
  Dump of assembler code for function main:
     0x00010230 <+0>:	addi	sp,sp,-16
     0x00010234 <+4>:	sw	ra,12(sp)
     0x00010238 <+8>:	sw	s0,8(sp)
     0x0001023c <+12>:	addi	s0,sp,16
     0x00010240 <+16>:	jal	ra,0x101dc <f>
     0x00010244 <+20>:	jal	ra,0x101f8 <g>
     0x00010248 <+24>:	jal	ra,0x10214 <h>
     0x0001024c <+28>:	li	a5,0
     0x00010250 <+32>:	mv	a0,a5
     0x00010254 <+36>:	lw	ra,12(sp)
     0x00010258 <+40>:	lw	s0,8(sp)
     0x0001025c <+44>:	addi	sp,sp,16
     0x00010260 <+48>:	ret
  End of assembler dump.
  Dump of assembler code for function f:
     0x000101dc <+0>:	addi	sp,sp,-16
     0x000101e0 <+4>:	sw	s0,12(sp)
     0x000101e4 <+8>:	addi	s0,sp,16
     0x000101e8 <+12>:	nop
     0x000101ec <+16>:	lw	s0,12(sp)
     0x000101f0 <+20>:	addi	sp,sp,16
     0x000101f4 <+24>:	ret
  End of assembler dump.
  Dump of assembler code for function g:
     0x000101f8 <+0>:	addi	sp,sp,-16
     0x000101fc <+4>:	sw	s0,12(sp)
     0x00010200 <+8>:	addi	s0,sp,16
     0x00010204 <+12>:	nop
     0x00010208 <+16>:	lw	s0,12(sp)
     0x0001020c <+20>:	addi	sp,sp,16
     0x00010210 <+24>:	ret
  End of assembler dump.
  Dump of assembler code for function h:
     0x00010214 <+0>:	addi	sp,sp,-16
     0x00010218 <+4>:	sw	s0,12(sp)
     0x0001021c <+8>:	addi	s0,sp,16
     0x00010220 <+12>:	nop
     0x00010224 <+16>:	lw	s0,12(sp)
     0x00010228 <+20>:	addi	sp,sp,16
     0x0001022c <+24>:	ret
  End of assembler dump.
#+end_src            

** Global variable
Source file in C
#+begin_src c :tangle global1.c
  #include <stdio.h>

  int x;

  void fa() {
    x = x + x + 2;
  }

  int y = 3;

  void fb() {
    x = 5;
    y = -2;
    fa();
  }

  int main() {
    fb();
    printf("x = %0d\n", x);
    printf("y = %0d\n", y);
    return 0;
  }

  // compiled:
  // gcc -g global1.c -o global1
  // gdb -batch -ex 'file global1' -ex 'disassemble main' -ex 'disassemble fa' -ex 'disassemble fb'
  // objdump -d -S global1
#+end_src   

Assembly language generated by GCC
#+begin_src asm
  global1:     file format elf32-littleriscv


  Disassembly of section .text:

  00000000 <fa>:
  #include <stdio.h>

  int x;

  void fa() {
     0:   ff010113                addi    sp,sp,-16

  00000004 <.LCFI0>:
     4:   00812623                sw      s0,12(sp)

  00000008 <.LCFI1>:
     8:   01010413                addi    s0,sp,16

  0000000c <.LCFI2>:
    x = x + x + 2;
     c:   000007b7                lui     a5,0x0
    10:   0007a783                lw      a5,0(a5) # 0 <fa>
    14:   00178793                addi    a5,a5,1
    18:   00179713                slli    a4,a5,0x1
    1c:   000007b7                lui     a5,0x0
    20:   00e7a023                sw      a4,0(a5) # 0 <fa>
  }
    24:   00000013                nop
    28:   00c12403                lw      s0,12(sp)

  0000002c <.LCFI3>:
    2c:   01010113                addi    sp,sp,16

  00000030 <.LCFI4>:
    30:   00008067                ret

  00000034 <fb>:

  int y = 3;

  void fb() {
    34:   ff010113                addi    sp,sp,-16

  00000038 <.LCFI5>:
    38:   00112623                sw      ra,12(sp)
    3c:   00812423                sw      s0,8(sp)

  00000040 <.LCFI6>:
    40:   01010413                addi    s0,sp,16

  00000044 <.LCFI7>:
    x = 5;
    44:   000007b7                lui     a5,0x0
    48:   00500713                li      a4,5
    4c:   00e7a023                sw      a4,0(a5) # 0 <fa>
    y = -2;
    50:   000007b7                lui     a5,0x0
    54:   ffe00713                li      a4,-2
    58:   00e7a023                sw      a4,0(a5) # 0 <fa>
    fa();
    5c:   00000317                auipc   t1,0x0
    60:   000300e7                jalr    t1
  }
    64:   00000013                nop
    68:   00c12083                lw      ra,12(sp)

  0000006c <.LCFI8>:
    6c:   00812403                lw      s0,8(sp)

  00000070 <.LCFI9>:
    70:   01010113                addi    sp,sp,16

  00000074 <.LCFI10>:
    74:   00008067                ret

  00000078 <main>:

  int main() {
    78:   ff010113                addi    sp,sp,-16

  0000007c <.LCFI11>:
    7c:   00112623                sw      ra,12(sp)
    80:   00812423                sw      s0,8(sp)

  00000084 <.LCFI12>:
    84:   01010413                addi    s0,sp,16

  00000088 <.LCFI13>:
    fb();
    88:   00000317                auipc   t1,0x0
    8c:   000300e7                jalr    t1
    printf("x = %0d\n", x);
    90:   000007b7                lui     a5,0x0
    94:   0007a783                lw      a5,0(a5) # 0 <fa>
    98:   00078593                mv      a1,a5
    9c:   000007b7                lui     a5,0x0
    a0:   00078513                mv      a0,a5
    a4:   00000317                auipc   t1,0x0
    a8:   000300e7                jalr    t1
    printf("y = %0d\n", y);
    ac:   000007b7                lui     a5,0x0
    b0:   0007a783                lw      a5,0(a5) # 0 <fa>
    b4:   00078593                mv      a1,a5
    b8:   000007b7                lui     a5,0x0
    bc:   00078513                mv      a0,a5
    c0:   00000317                auipc   t1,0x0
    c4:   000300e7                jalr    t1
    return 0;
    c8:   00000793                li      a5,0
  }
    cc:   00078513                mv      a0,a5
    d0:   00c12083                lw      ra,12(sp)

  000000d4 <.LCFI14>:
    d4:   00812403                lw      s0,8(sp)

  000000d8 <.LCFI15>:
    d8:   01010113                addi    sp,sp,16

  000000dc <.LCFI16>:
    dc:   00008067                ret   
#+end_src

#+begin_src 
            
#+end_src            
** Local variable
** Static variable
** Using the GNU Assembler
*** Assembly using as

#+BEGIN_SRC 
as lh.s -o lh && objdump -d lh
#+END_SRC
*** Generating assembly file using gcc
gcc -save-temps test.c -o test
#+BEGIN_SRC c
  int main() {
    return 0;
  }
#+END_SRC
*** Disassembling using gdb
#+begin_src sh
gdb -batch -ex 'file execfile' -ex 'disassemble main            
#+end_src            
